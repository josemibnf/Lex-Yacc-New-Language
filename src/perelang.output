Grammar

    0 $accept: programa $end

    1 programa: /* empty */
    2         | INICI llistainst FINAL

    3 llistainst: /* empty */
    4           | llistainst inst
    5           | llistainst ambit

    6 ambit: INICI aux_ambit llistainst FINAL

    7 aux_ambit: /* empty */

    8 inst: ';'
    9     | decla ';'
   10     | asig ';'
   11     | error ';'

   12 decla: tipus llistaid

   13 tipus: INT
   14      | REAL
   15      | CHAR
   16      | BOOLEAN

   17 llistaid: ID
   18         | llistaid ',' ID

   19 asig: ID '=' aux expr

   20 aux: /* empty */

   21 expr: expr '+' expr
   22     | expr '-' expr
   23     | expr '*' expr
   24     | expr '/' expr
   25     | '(' expr ')'
   26     | ID
   27     | VINT
   28     | VREAL
   29     | VCHAR
   30     | VBOOLEAN


Terminals, with rules where they appear

$end (0) 0
'(' (40) 25
')' (41) 25
'*' (42) 23
'+' (43) 21
',' (44) 18
'-' (45) 22
'/' (47) 24
';' (59) 8 9 10 11
'=' (61) 19
error (256) 11
ID (258) 17 18 19 26
VINT (259) 27
VREAL (260) 28
VCHAR (261) 29
VBOOLEAN (262) 30
INT (263) 13
REAL (264) 14
CHAR (265) 15
BOOLEAN (266) 16
INICI (267) 2 6
FINAL (268) 2 6


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
programa (24)
    on left: 1 2, on right: 0
llistainst (25)
    on left: 3 4 5, on right: 2 4 5 6
ambit (26)
    on left: 6, on right: 5
aux_ambit (27)
    on left: 7, on right: 6
inst (28)
    on left: 8 9 10 11, on right: 4
decla (29)
    on left: 12, on right: 9
tipus (30)
    on left: 13 14 15 16, on right: 12
llistaid (31)
    on left: 17 18, on right: 12 18
asig (32)
    on left: 19, on right: 10
aux (33)
    on left: 20, on right: 19
expr (34)
    on left: 21 22 23 24 25 26 27 28 29 30, on right: 19 21 22 23 24
    25


state 0

    0 $accept: . programa $end

    INICI  shift, and go to state 1

    $default  reduce using rule 1 (programa)

    programa  go to state 2


state 1

    2 programa: INICI . llistainst FINAL

    $default  reduce using rule 3 (llistainst)

    llistainst  go to state 3


state 2

    0 $accept: programa . $end

    $end  shift, and go to state 4


state 3

    2 programa: INICI llistainst . FINAL
    4 llistainst: llistainst . inst
    5           | llistainst . ambit

    error    shift, and go to state 5
    ID       shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    INICI    shift, and go to state 11
    FINAL    shift, and go to state 12
    ';'      shift, and go to state 13

    ambit  go to state 14
    inst   go to state 15
    decla  go to state 16
    tipus  go to state 17
    asig   go to state 18


state 4

    0 $accept: programa $end .

    $default  accept


state 5

   11 inst: error . ';'

    ';'  shift, and go to state 19


state 6

   19 asig: ID . '=' aux expr

    '='  shift, and go to state 20


state 7

   13 tipus: INT .

    $default  reduce using rule 13 (tipus)


state 8

   14 tipus: REAL .

    $default  reduce using rule 14 (tipus)


state 9

   15 tipus: CHAR .

    $default  reduce using rule 15 (tipus)


state 10

   16 tipus: BOOLEAN .

    $default  reduce using rule 16 (tipus)


state 11

    6 ambit: INICI . aux_ambit llistainst FINAL

    $default  reduce using rule 7 (aux_ambit)

    aux_ambit  go to state 21


state 12

    2 programa: INICI llistainst FINAL .

    $default  reduce using rule 2 (programa)


state 13

    8 inst: ';' .

    $default  reduce using rule 8 (inst)


state 14

    5 llistainst: llistainst ambit .

    $default  reduce using rule 5 (llistainst)


state 15

    4 llistainst: llistainst inst .

    $default  reduce using rule 4 (llistainst)


state 16

    9 inst: decla . ';'

    ';'  shift, and go to state 22


state 17

   12 decla: tipus . llistaid

    ID  shift, and go to state 23

    llistaid  go to state 24


state 18

   10 inst: asig . ';'

    ';'  shift, and go to state 25


state 19

   11 inst: error ';' .

    $default  reduce using rule 11 (inst)


state 20

   19 asig: ID '=' . aux expr

    $default  reduce using rule 20 (aux)

    aux  go to state 26


state 21

    6 ambit: INICI aux_ambit . llistainst FINAL

    $default  reduce using rule 3 (llistainst)

    llistainst  go to state 27


state 22

    9 inst: decla ';' .

    $default  reduce using rule 9 (inst)


state 23

   17 llistaid: ID .

    $default  reduce using rule 17 (llistaid)


state 24

   12 decla: tipus llistaid .
   18 llistaid: llistaid . ',' ID

    ','  shift, and go to state 28

    $default  reduce using rule 12 (decla)


state 25

   10 inst: asig ';' .

    $default  reduce using rule 10 (inst)


state 26

   19 asig: ID '=' aux . expr

    ID        shift, and go to state 29
    VINT      shift, and go to state 30
    VREAL     shift, and go to state 31
    VCHAR     shift, and go to state 32
    VBOOLEAN  shift, and go to state 33
    '('       shift, and go to state 34

    expr  go to state 35


state 27

    4 llistainst: llistainst . inst
    5           | llistainst . ambit
    6 ambit: INICI aux_ambit llistainst . FINAL

    error    shift, and go to state 5
    ID       shift, and go to state 6
    INT      shift, and go to state 7
    REAL     shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    INICI    shift, and go to state 11
    FINAL    shift, and go to state 36
    ';'      shift, and go to state 13

    ambit  go to state 14
    inst   go to state 15
    decla  go to state 16
    tipus  go to state 17
    asig   go to state 18


state 28

   18 llistaid: llistaid ',' . ID

    ID  shift, and go to state 37


state 29

   26 expr: ID .

    $default  reduce using rule 26 (expr)


state 30

   27 expr: VINT .

    $default  reduce using rule 27 (expr)


state 31

   28 expr: VREAL .

    $default  reduce using rule 28 (expr)


state 32

   29 expr: VCHAR .

    $default  reduce using rule 29 (expr)


state 33

   30 expr: VBOOLEAN .

    $default  reduce using rule 30 (expr)


state 34

   25 expr: '(' . expr ')'

    ID        shift, and go to state 29
    VINT      shift, and go to state 30
    VREAL     shift, and go to state 31
    VCHAR     shift, and go to state 32
    VBOOLEAN  shift, and go to state 33
    '('       shift, and go to state 34

    expr  go to state 38


state 35

   19 asig: ID '=' aux expr .
   21 expr: expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40
    '*'  shift, and go to state 41
    '/'  shift, and go to state 42

    $default  reduce using rule 19 (asig)


state 36

    6 ambit: INICI aux_ambit llistainst FINAL .

    $default  reduce using rule 6 (ambit)


state 37

   18 llistaid: llistaid ',' ID .

    $default  reduce using rule 18 (llistaid)


state 38

   21 expr: expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   25     | '(' expr . ')'

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40
    '*'  shift, and go to state 41
    '/'  shift, and go to state 42
    ')'  shift, and go to state 43


state 39

   21 expr: expr '+' . expr

    ID        shift, and go to state 29
    VINT      shift, and go to state 30
    VREAL     shift, and go to state 31
    VCHAR     shift, and go to state 32
    VBOOLEAN  shift, and go to state 33
    '('       shift, and go to state 34

    expr  go to state 44


state 40

   22 expr: expr '-' . expr

    ID        shift, and go to state 29
    VINT      shift, and go to state 30
    VREAL     shift, and go to state 31
    VCHAR     shift, and go to state 32
    VBOOLEAN  shift, and go to state 33
    '('       shift, and go to state 34

    expr  go to state 45


state 41

   23 expr: expr '*' . expr

    ID        shift, and go to state 29
    VINT      shift, and go to state 30
    VREAL     shift, and go to state 31
    VCHAR     shift, and go to state 32
    VBOOLEAN  shift, and go to state 33
    '('       shift, and go to state 34

    expr  go to state 46


state 42

   24 expr: expr '/' . expr

    ID        shift, and go to state 29
    VINT      shift, and go to state 30
    VREAL     shift, and go to state 31
    VCHAR     shift, and go to state 32
    VBOOLEAN  shift, and go to state 33
    '('       shift, and go to state 34

    expr  go to state 47


state 43

   25 expr: '(' expr ')' .

    $default  reduce using rule 25 (expr)


state 44

   21 expr: expr . '+' expr
   21     | expr '+' expr .
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr

    '*'  shift, and go to state 41
    '/'  shift, and go to state 42

    $default  reduce using rule 21 (expr)


state 45

   21 expr: expr . '+' expr
   22     | expr . '-' expr
   22     | expr '-' expr .
   23     | expr . '*' expr
   24     | expr . '/' expr

    '*'  shift, and go to state 41
    '/'  shift, and go to state 42

    $default  reduce using rule 22 (expr)


state 46

   21 expr: expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   23     | expr '*' expr .
   24     | expr . '/' expr

    $default  reduce using rule 23 (expr)


state 47

   21 expr: expr . '+' expr
   22     | expr . '-' expr
   23     | expr . '*' expr
   24     | expr . '/' expr
   24     | expr '/' expr .

    $default  reduce using rule 24 (expr)
