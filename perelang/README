ÚS:

./if_else_while_label [input_file] [output_file]


Genera codi3@ per a les instruccions if/else i while/do avaluant les condicions mitjançant salts entre labels.

És l’extensió de l’exemple 2 amb l’estructura while/do.

La idea és associar amb cada constructor de condició (cond) dos atributs sintetitzats: l’etiqueta de salt quan la condició  s’valua a cert (cond.V) i l’etiqueta de salt quan la condició  s’valua a fals (cond.F).

Cada operador de relació es tradueix en un test de condició:

A<B es tradueix en	if A LT B goto con.V
			goto cond.F

La negació s’implementa girant directament les etiquetes de la condició.

La conjunció cond1 && cond2 s’implementa:
	- traducció de cond1
	- Label cond1.V
	- traducció de cond2
	- Label cond1.F: goto cond2.F

La disjunció cond1 && cond2 s’implementa:
	- traducció de cond1
	- Label cond1.F
	- traducció de cond2
	- Label cond1.V: goto cond2.V
	

Ventatja: Eficiència en temps d’execucuó. Genera menys variables temporals i únicament s’avaluen les expressions lògiques estrictament necessàries (les expressions lògiques s’avaluen completament únicament quan és un AND i totes les components són certes, o és un OR i totes les components són falses).

Inconvenients: codi3@ poc llegible i poc intuitiu, principalment quan involucra negacions. Molts salts en temps execució.


Altres solucions: 

(1) Avaluar les condicions sobre variables temporals tal i com es fa amb les expressions: Solució implementada a l’Exemple3. Ventatja codi3@ més llegible e intuitiu amb menys salts entre etiquetes. 

(2) Per fer més llegible el codi resultat de processar les negacions: propagar la negació sobre els operadors i generar codi3@ per a l’expressió  resultant de la propagació.


